// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashable is a mock of Hashable interface.
type MockHashable struct {
	ctrl     *gomock.Controller
	recorder *MockHashableMockRecorder
}

// MockHashableMockRecorder is the mock recorder for MockHashable.
type MockHashableMockRecorder struct {
	mock *MockHashable
}

// NewMockHashable creates a new mock instance.
func NewMockHashable(ctrl *gomock.Controller) *MockHashable {
	mock := &MockHashable{ctrl: ctrl}
	mock.recorder = &MockHashableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashable) EXPECT() *MockHashableMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHashable) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHashableMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHashable)(nil).Hash))
}

// MockEntityCache is a mock of EntityCache interface.
type MockEntityCache[V Hashable] struct {
	ctrl     *gomock.Controller
	recorder *MockEntityCacheMockRecorder[V]
}

// MockEntityCacheMockRecorder is the mock recorder for MockEntityCache.
type MockEntityCacheMockRecorder[V Hashable] struct {
	mock *MockEntityCache[V]
}

// NewMockEntityCache creates a new mock instance.
func NewMockEntityCache[V Hashable](ctrl *gomock.Controller) *MockEntityCache[V] {
	mock := &MockEntityCache[V]{ctrl: ctrl}
	mock.recorder = &MockEntityCacheMockRecorder[V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityCache[V]) EXPECT() *MockEntityCacheMockRecorder[V] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEntityCache[V]) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntityCacheMockRecorder[V]) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntityCache[V])(nil).Delete), key)
}

// Get mocks base method.
func (m *MockEntityCache[V]) Get(key string) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEntityCacheMockRecorder[V]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntityCache[V])(nil).Get), key)
}

// GetList mocks base method.
func (m *MockEntityCache[V]) GetList(limit, offset uint) ([]V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", limit, offset)
	ret0, _ := ret[0].([]V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockEntityCacheMockRecorder[V]) GetList(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockEntityCache[V])(nil).GetList), limit, offset)
}

// Replace mocks base method.
func (m *MockEntityCache[V]) Replace(values []V) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockEntityCacheMockRecorder[V]) Replace(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockEntityCache[V])(nil).Replace), values)
}

// Set mocks base method.
func (m *MockEntityCache[V]) Set(value V) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockEntityCacheMockRecorder[V]) Set(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockEntityCache[V])(nil).Set), value)
}
